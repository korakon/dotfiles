" "------------------------------------------------------------
" Features {{{1

" These options and commands enable some very useful features in Vim, that
" no user should have to live without.

" Set 'nocompatible' to ward off unexpected things that your distro might
" have made, as well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype off

" Vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let Vundle manage Vundle
" required! 

" ---------------------------------------------
" Plugins
Plugin 'gmarik/vundle'

" original repos on github
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-markdown'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'kien/ctrlp.vim'
Plugin 'vim-scripts/bufexplorer.zip'
"Plugin 'Lokaltog/vim-powerline'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-surround'
Plugin 'xolox/vim-misc'
Plugin 'Raimondi/delimitMate'
Plugin 'ervandew/supertab'
Plugin 'honza/vim-snippets'
Plugin 'garbas/vim-snipmate'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'Glench/Vim-Jinja2-Syntax'
Plugin 'mattn/emmet-vim'
Plugin 'altercation/vim-colors-solarized'
" Racket

Plugin 'wlangstroth/vim-racket'

" Stylus

Plugin 'wavded/vim-stylus'

" Jade

Plugin 'digitaltoad/vim-jade'

" Coffeescript

Plugin 'kchmck/vim-coffee-script'

" Haskell

Plugin 'Twinside/vim-syntax-haskell-cabal'
Plugin 'lukerandall/haskellmode-vim'

au BufEnter *.hs compiler ghc

let g:ghc = "/usr/local/bin/ghc"
let g:haddock_browser = "chromium"

" Colors

"Plugin 'tomasr/molokai'
Plugin 'sjl/badwolf'
"Plugin 'john2x/flatui.vim'

call vundle#end()
filetype indent plugin on

" Colorscheme
set background=dark
colorscheme solarized

" Enable syntax highlighting
syntax on

" 80 colum
set colorcolumn=79
"set textwidth=100

"------------------------------------------------------------
" Must have options {{{1
"
" These are highly recommended options.

" One of the most important options to activate. Allows you to switch from an
" unsaved buffer without saving it first. Also allows you to keep an undo
" history for multiple files. Vim will complain if you try to quit without
" saving, and swap files will keep you safe if your computer crashes.
set hidden

" Note that not everyone likes working this way (with the hidden option).
" Alternatives include using tabs or split windows instead of re-using the
" same window for multiple buffers, and/or:
" set confirm
" set autowriteall

" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

" Highlight searches (use <C-L> to temporarily turn off highlighting; see
" mapping of <C-L> below)
set hlsearch

" Modelines have historically been a source of security vulnerabilities. As
" such, it may be a good idea to disable them and use the securemodelines
" script, <http://www.vim.org/scripts/script.php?script_id=1876>.
" set nomodeline

" Disable fuking swap files
set nobackup
set nowritebackup
set noswapfile

"------------------------------------------------------------
" Usability options {{{1
"
" These are options that users frequently set in their .vimrc. Some of them
" change Vim's behaviour in ways which deviate from the true Vi way, but
" which are considered to add usability. Which, if any, of these options to
" use is very much a personal preference, but they are harmless.

" Use case insensitive search, except when using capital letters
set ignorecase
set smartcase

" Ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip


" Nerdtree arrows problem with unicode
let g:NERDTreeDirArrows=0

" CtrlP ignore path
"let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$|node_modules$|bin$|lib$'

let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|\.git\|lib\|bin'

let g:ctrlp_prompt_mappings = {
    \ 'PrtBS()': ['<c-h>'],
    \ 'PrtCurLeft()': ['<left>'],
    \ }


" Allow backspacing over autoindent, line breaks and start of insert action
set backspace=indent,eol,start

" When opening a new line and no filetype-specific indenting is enabled, keep
" the same indent as the line you're currently on. Useful for READMEs, etc.
set autoindent

" Stop certain movements from always going to the first character of a line.
" While this behaviour deviates from that of Vi, it does what most users
" coming from other editors would expect.
set nostartofline

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Highlight the current line
" 1. bg
" 2. cursor
" set cursorline             
"hi cursorline guibg=#FFFFFF
"hi CursorColumn guibg=#FF0000

" Always display the status line, even if only one window is displayed
" set laststatus=1

" Instead of failing a command because of unsaved changes, instead raise a
" dialogue asking if you wish to save changed files.
set confirm

" Use visual bell instead of beeping when doing something wrong
set visualbell

" And reset the terminal code for the visual bell. If visualbell is set, and
" this line is also included, vim will neither flash nor beep. If visualbell
" is unset, this does nothing.
set t_vb=

" Enable use of the mouse for all modes
set mouse=a

" Set the command window height to 2 lines, to avoid many cases of having to
" "press <Enter> to continue"
" set cmdheight=1

" Don't Display line numbers on the left
set nonumber

" Relative numbering
"set rnu
"set invnumber

" Quickly time out on keycodes, but never time out on mappings
set notimeout ttimeout ttimeoutlen=200

" Use <F11> to toggle between 'paste' and 'nopaste'
set pastetoggle=<F3>

" ----------------------------------------------- Costum stuff
" Show matching brackets/parenthesis
set showmatch

" Search as I type
set incsearch 

set laststatus=2
" Broken down into easily includeable segments
set statusline=%<%f\   " Filename
set statusline+=%w%h%m%r " Options
set statusline+=%{fugitive#statusline()} "  Git Hotness
set statusline+=\ [%{&ff}/%Y]            " filetype
set statusline+=\ [%{getcwd()}]          " current dir
set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info


" Disable the scollbars
set guioptions-=r
set guioptions-=d

" Set dictionary
" set dictionary=/usr/share/dict/words
" set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
" set complete-=k complete+=k

" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave * set nocursorline
    au WinEnter * set cursorline
    au InsertEnter * set nocursorline
    au InsertLeave * set cursorline
augroup END


"------------------------------------------------------------
" Indentation options {{{1
"
" Indentation settings according to personal preference.
" set smartindent

" Indentation settings for using 2 spaces instead of tabs.
" Do not change 'tabstop' from its default value of 8 with this setup.

set tabstop=4
set shiftwidth=4
"set noexpandtab
set expandtab
  
" Indentation settings for using hard tabs for indent. Display tabs as
" two characters wide.
"set shiftwidth=2

"------------------------------------------------------------
" Mappings {{{1
"
" Useful mappings

" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$

"The default leader is '\', but many people prefer ',' as it's in a standard
"location
let mapleader = ','


" Map <C-L> (redraw screen) to also turn off search highlighting until the
" next search
" nnoremap <C-L> :nohl<CR><C-L>
nmap <silent> <leader>l :nohlsearch<CR>


" bracket match using tab
map <tab> %

" Source current line
vnoremap <leader>L y:execute @@<cr>
" Source visual selection 
nnoremap <leader>L ^vg_y:execute @@<cr>

" w!! to write a file as sudo
" stolen from Steve Losh
cmap w!! w !sudo tee % >/dev/null

" Avoid typing Esc, I hate typing Esc
imap jk <Esc>



" Making it so ; works like : for commands. Saves typing and eliminates :W style typos due to lazy holding shift.
nnoremap ; :

" Easier moving in tabs and windows
"map <C-J> <C-W>j<C-W>_
"map <C-K> <C-W>k<C-W>_
"map <C-L> <C-W>l<C-W>_
"map <C-H> <C-W>h<C-W>_

map <C-J> <C-W>j
map <C-K> <C-W>k
map <C-L> <C-W>l
map <C-H> <C-W>h

" Toggle line numbers
nmap <C-n> :set invnumber<CR>

" Wrapped lines goes down/up to next row, rather than next line in file.
nnoremap j gj
nnoremap k gk

" Shortcuts
" Change Working Directory to that of the current file
cmap cwd lcd %:p:h
cmap cd. lcd %:p:h

" Splits ,v and ,h to open new splits (vertical and horizontal)
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>j

" Open new tab ,t
nnoremap <leader>t <C-w>v<C-w>l

" Close tab ,x
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>x :tabclose<CR>

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Space to toggle folds.
nnoremap <Enter> za
vnoremap <Enter> za

" Remove The FUCKING ARROW KEYS
noremap <Up>     <nop>
noremap <Down>   <nop>
noremap <Left>   <nop>
noremap <Right>  <nop>

inoremap <Up>     <nop>
inoremap <Down>   <nop>
inoremap <Left>   <nop>
inoremap <Right>  <nop>

"-----------------------------------------------------------
" Plugins Mappings
nnoremap <leader>r :NERDTreeToggle<CR>

let NERDTreeIgnore=['__pycache__']

" Nerdcommenter
map <leader>m <plug>NERDCommenterComment

" Session
" let g:session_autosave='yes'
" let g:session_autoload='yes'
 
